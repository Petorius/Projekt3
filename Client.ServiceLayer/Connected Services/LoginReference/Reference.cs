//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceLayer.LoginReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoginReference.ILoginService")]
    public interface ILoginService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CreateUserWithPassword", ReplyAction="http://tempuri.org/ILoginService/CreateUserWithPasswordResponse")]
        bool CreateUserWithPassword(string firstName, string lastName, string street, int zip, string city, string email, int number, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/CreateUserWithPassword", ReplyAction="http://tempuri.org/ILoginService/CreateUserWithPasswordResponse")]
        System.Threading.Tasks.Task<bool> CreateUserWithPasswordAsync(string firstName, string lastName, string street, int zip, string city, string email, int number, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ValidatePassword", ReplyAction="http://tempuri.org/ILoginService/ValidatePasswordResponse")]
        bool ValidatePassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ValidatePassword", ReplyAction="http://tempuri.org/ILoginService/ValidatePasswordResponse")]
        System.Threading.Tasks.Task<bool> ValidatePasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ValidateAdminLogin", ReplyAction="http://tempuri.org/ILoginService/ValidateAdminLoginResponse")]
        bool ValidateAdminLogin(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginService/ValidateAdminLogin", ReplyAction="http://tempuri.org/ILoginService/ValidateAdminLoginResponse")]
        System.Threading.Tasks.Task<bool> ValidateAdminLoginAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoginServiceChannel : Client.ServiceLayer.LoginReference.ILoginService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginServiceClient : System.ServiceModel.ClientBase<Client.ServiceLayer.LoginReference.ILoginService>, Client.ServiceLayer.LoginReference.ILoginService {
        
        public LoginServiceClient() {
        }
        
        public LoginServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoginServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateUserWithPassword(string firstName, string lastName, string street, int zip, string city, string email, int number, string password) {
            return base.Channel.CreateUserWithPassword(firstName, lastName, street, zip, city, email, number, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserWithPasswordAsync(string firstName, string lastName, string street, int zip, string city, string email, int number, string password) {
            return base.Channel.CreateUserWithPasswordAsync(firstName, lastName, street, zip, city, email, number, password);
        }
        
        public bool ValidatePassword(string email, string password) {
            return base.Channel.ValidatePassword(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidatePasswordAsync(string email, string password) {
            return base.Channel.ValidatePasswordAsync(email, password);
        }
        
        public bool ValidateAdminLogin(string email, string password) {
            return base.Channel.ValidateAdminLogin(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAdminLoginAsync(string email, string password) {
            return base.Channel.ValidateAdminLoginAsync(email, password);
        }
    }
}
