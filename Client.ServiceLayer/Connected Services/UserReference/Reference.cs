//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceLayer.UserReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUserWithPassword", ReplyAction="http://tempuri.org/IUserService/CreateUserWithPasswordResponse")]
        bool CreateUserWithPassword(string firstName, string lastName, string street, int zip, string city, string email, int number, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CreateUserWithPassword", ReplyAction="http://tempuri.org/IUserService/CreateUserWithPasswordResponse")]
        System.Threading.Tasks.Task<bool> CreateUserWithPasswordAsync(string firstName, string lastName, string street, int zip, string city, string email, int number, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ValidatePassword", ReplyAction="http://tempuri.org/IUserService/ValidatePasswordResponse")]
        bool ValidatePassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/ValidatePassword", ReplyAction="http://tempuri.org/IUserService/ValidatePasswordResponse")]
        System.Threading.Tasks.Task<bool> ValidatePasswordAsync(string email, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Client.ServiceLayer.UserReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<Client.ServiceLayer.UserReference.IUserService>, Client.ServiceLayer.UserReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateUserWithPassword(string firstName, string lastName, string street, int zip, string city, string email, int number, string password) {
            return base.Channel.CreateUserWithPassword(firstName, lastName, street, zip, city, email, number, password);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserWithPasswordAsync(string firstName, string lastName, string street, int zip, string city, string email, int number, string password) {
            return base.Channel.CreateUserWithPasswordAsync(firstName, lastName, street, zip, city, email, number, password);
        }
        
        public bool ValidatePassword(string email, string password) {
            return base.Channel.ValidatePassword(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> ValidatePasswordAsync(string email, string password) {
            return base.Channel.ValidatePasswordAsync(email, password);
        }
    }
}
